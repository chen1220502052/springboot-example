spring.application.name = timo-store-test

# ==============================================================
# = Server config
# ==============================================================
server.port = 8888
server.compression.enabled = true
#server.servlet.path=*.do

# ==============================================================
# = tomact log
# ==============================================================
server.tomcat.basedir = /springboot/logs/
server.tomcat.accesslog.enabled = true
server.tomcat.accesslog.pattern = %h %l %u %t; %r; [%{postdata}r] %s %{Referer}i %{User-Agent}i %T %b (%D ms)

#logging.file = /springboot/logs/exampleapplication.log


# ==============================================================
# = tomact config
# ==============================================================
server.tomcat.remote-ip-header=x-forwarded-for
server.tomcat.protocol-header=x-forwarded-proto

# ==============================================================
# = spring http encode
# ==============================================================
# Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.
spring.http.encoding.charset=UTF-8
# Whether to enable http encoding support.
spring.http.encoding.enabled=true

# ==============================================================
# = spring MultipartProperties
# ==============================================================
# Whether to enable support of multipart uploads.
spring.servlet.multipart.enabled=true
# Max file size. Values can use the suffixes "MB" or "KB" to indicate megabytes or kilobytes, respectively.
spring.servlet.multipart.max-file-size = 100MB
# Max request size. Values can use the suffixes "MB" or "KB" to indicate megabytes or kilobytes, respectively.
spring.servlet.multipart.max-request-size=100MB
# Whether to resolve the multipart request lazily at the time of file or parameter access.
spring.servlet.multipart.resolve-lazily=false

# ==============================================================
# = spring MVC
# ==============================================================
# Whether to enable resolution of favicon.ico.
spring.mvc.favicon.enabled=false
# Spring MVC view prefix.
spring.mvc.view.prefix = /WEB-INF/pages/
# Spring MVC view suffix.
spring.mvc.view.suffix= = .jsp
#spring.mvc.servlet.load-on-startup=-1 # Load on startup priority of the dispatcher servlet.

# ==============================================================
# = DAO (PersistenceExceptionTranslationAutoConfiguration)
# ==============================================================
# Whether to enable the PersistenceExceptionTranslationPostProcessor.
spring.dao.exceptiontranslation.enabled=true

# ==============================================================
# = Aop config
# ==============================================================
#Add @EnableAspectJAutoProxy.
spring.aop.auto=true
# Whether subclass-based (CGLIB) proxies are to be created (true), as opposed to standard Java interface-based proxies (false).
spring.aop.proxy-target-class=true 

# ==============================================================
# = Data Source
# ==============================================================
#spring.datasource.url = jdbc:mysql://localhost:3306/test?useSSL=false
#spring.datasource.username = root
#spring.datasource.password = 123456
#spring.datasource.dbcp2.max-total = 30 
example.datasource.first.url = jdbc:mysql://localhost:3306/test?useSSL=false
example.datasource.first.username = root
example.datasource.first.password = 123456
example.datasource.first.max-total = 30 


example.datasource.second.url = jdbc:mysql://localhost:3306/somao?useSSL=false
example.datasource.second.username = root
example.datasource.second.password = 123456
example.datasource.second.max-total = 30 
# ==============================================================
# = Keep the connection alive if idle for a long time (needed in production)
# ==============================================================
spring.datasource.tomcat.test-while-idle = true
spring.datasource.tomcat.validation-query = SELECT 1


# ==============================================================
# = Show or not log for each sql query
# ==============================================================
spring.jpa.show-sql = true

# ==============================================================
# = Hibernate ddl auto (create, create-drop, update)
# ==============================================================
spring.jpa.hibernate.ddl-auto = update

# ==============================================================
# = The SQL dialect makes Hibernate generate better SQL for the chosen database
# ==============================================================
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
spring.queries.users-query=select email, password, active from user where email=?
spring.queries.roles-query=select u.email, r.role from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?

# ==============================================================# Maximum number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
# = Initialize the database using data.sql script
# ==============================================================
spring.datasource.initialization-mode=always

# ==============================================================
# = redis config
# ==============================================================
# Redis server host.
spring.redis.host=localhost
# Redis server port.
spring.redis.port=6379
#spring.redis.password= # Login password of the redis server.
spring.redis.timeout=5
# Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
spring.redis.jedis.pool.max-active=8
# Maximum number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
spring.redis.jedis.pool.max-idle=8
# Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
spring.redis.jedis.pool.max-wait=5000ms
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
spring.redis.jedis.pool.min-idle=0

# ==============================================================
# = TRANSACTION config
# ==============================================================
#spring.transaction.default-timeout= # Default transaction timeout. If a duration suffix is not specified, seconds will be used.
# Whether to roll back on commit failures.
spring.transaction.rollback-on-commit-failure=true

# ==============================================================
# = ACTIVEMQ config
# ==============================================================
#spring.activemq.broker-url= # URL of the ActiveMQ broker. Auto-generated by default.
#spring.activemq.close-timeout=15s # Time to wait before considering a close complete.
#spring.activemq.in-memory=true # Whether the default broker URL should be in memory. Ignored if an explicit broker has been specified.
#spring.activemq.non-blocking-redelivery=false # Whether to stop message delivery before re-delivering messages from a rolled back transaction. This implies that message order is not preserved when this is enabled.
#spring.activemq.password= # Login password of the broker.
#spring.activemq.send-timeout=0ms # Time to wait on message sends for a response. Set it to 0 to wait forever.
#spring.activemq.user= # Login user of the broker.
#spring.activemq.packages.trust-all= # Whether to trust all packages.
#spring.activemq.packages.trusted= # Comma-separated list of specific packages to trust (when not trusting all packages).
#spring.activemq.pool.block-if-full=true # Whether to block when a connection is requested and the pool is full. Set it to false to throw a "JMSException" instead.
#spring.activemq.pool.block-if-full-timeout=-1ms # Blocking period before throwing an exception if the pool is still full.
#spring.activemq.pool.enabled=false # Whether a PooledConnectionFactory should be created, instead of a regular ConnectionFactory.
#spring.activemq.pool.idle-timeout=30s # Connection idle timeout.
#spring.activemq.pool.max-connections=1 # Maximum number of pooled connections.
#spring.activemq.pool.maximum-active-session-per-connection=500 # Maximum number of active sessions per connection.
#spring.activemq.pool.time-between-expiration-check=-1ms # Time to sleep between runs of the idle connection eviction thread. When negative, no idle connection eviction thread runs.
#spring.activemq.pool.use-anonymous-producers=true # Whether to use only one anonymous "MessageProducer" instance. Set it to false to create one "MessageProducer" every time one is required.

# ----------------------------------------
# TESTING PROPERTIES
# ----------------------------------------
# MVC Print option.
spring.test.mockmvc.print=default 

# Dubbo Config properties
## ApplicationConfig Bean
dubbo.application.id = timo-afterservice-consumer
dubbo.application.name = timo-afterservice-consumer

## ProtocolConfig Bean
dubbo.protocol.id = dubbo
dubbo.protocol.name = dubbo
dubbo.protocol.port = -1
dubbo.registry.address=zookeeper://10.134.232.142:2181